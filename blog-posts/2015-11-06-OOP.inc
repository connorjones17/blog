<?php
$title="Object Oriented Programming";
$author="Connor Jones";
$date ="November 6th, 2015";
$image="objects.jpg";

$content_preview ="So many objects in the oriented world...";

$content="Object Oriented Programming has defined what it is to organise code, to reduce code repetition and make large
programs more efficient. Procedural code has been put away and will only make a standing for very small tasks and programs
. Functions have turned to methods, global variables to properties and scope has become more obvious with death of global
variables and procedural code. Long gone are the thousands of lines of code which now make thousands of files instead,
unless you work on iaptus of course, which means you have both.
<p>
Objects are a confusing bunch, but they are at the centre of everything you do in Object Oriented Programming.
They are used as a data type, to store multiple pieces of information but they can also execute commands such as methods
and constructors. They are defined to be an instance of a class, which means that they store all the data and information
created in that class. This is unbelievably useful to us, and the replication of these objects means that each object can
store the same type of data, but each type of data can hold a different value. An example of this that we are about to put
 into practice is a playing card. The type of data stored might be a reference to the colour of the card, each object is
 its own card and therefore each object will have the data type colour but half of them will store red and the other half
 black.
</p><p>
 A class is a place where this information is set. Classes must be generic so that multiple objects of them can be created
 . Inheritance is one of the most important aspects of creating and understanding classes. It works in the same way as
 passing on your genes, for example I got my incredibly good looks from my mother, however my quick functioning brain and
 sheer wit, well, that also came from my mother... Maybe this wasn't such a great example, but in a programming sense that
  is what it is, passing down functionality from one thing to multiple of things that have a similar trait. A class might be
  an animal where the generic data is something like eats, sleeps, breathes etc. You may then create a class
  of sheep and a class of cow that inherits the animal class. They both eat, sleep and breathe however they also
  communicate. A sheep will make the noise 'baaaaa' whilst a cow makes the noise 'mooooo' and so they differ but they
  still inherit some of the same characteristics. </p>
  ";

?>